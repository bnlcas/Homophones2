function ERPs = make_homophone_task_erps_band_varblocks(evnt, varargin) %, exp_dat)
%% This fucntion is designed to form ERPs for a single block of experimental data
% The result is a data structure containing information related to the prime and 
% target stimuli given in the homophone prime experiment
%
% Inputs:
%
% evnt - 1xNUM_TRIALS structured array - contains the names and paths of
% the stimuli data
%
% exp_dat - contains record of primes and stimuli for a test block
%
% Output:
%
% ERPs - structured array contains the following fields
%   ecog_primes - ecog erps of primes
%   ecog_targets - ecog erps of targets
%   is_related_dominant - boolean, if prime is for dominant sense of target
%   is_related_subordinant - boolean, if prime is for subordinant sense
%   time_axis - time axis of erps
%   target_names - list of target names
%   prime_names - list of prime names
%   target_duration - duration (in seconds) of target
%   prime_duration - duration (in seconds) of prime
%
%% Edit 1/18: Added variable inputs to add non-grid electrodes into the ERP structure:
% this includes first an option to load an alternative set of blocks (as
% opposed to the standard 4 blocks of grid electrodes)
% As well as the ability to load an alternative set of artifacts
% 
% Variable Input 1:
% band_inds - a set of indecies (between 1:40) indicating which frequency
% bands to aggregate
%
% Variable Input2: 
% list of data blocks to load Data is stored in 64 channel blocks.
% As a default 4, 64 channel blocks of grid electrodes are loaded
% Possible Alternative:
% variable input - load blocks flag:
% 'grid' - load blocks 1-4
% 'nongrid' - load blocks after 5
% 'all' - load all blocks
% 1:2 - (any numeric range of blocks that can be loaded)
%
% Variable Input3:
% badTimeSegments_filename - (default: 'badTimeSegments.mat') string input containing the list of badTimeSegments to load;
%
% Variable Input4:
% bad_channel_filename - (default: 'badChannels.txt') string input
% containing the list of bad_channels (Note that if only select electrodes
% are loaded, then the channel numbers must be modified.

%% Variable Input 1 - 
band_inds = 30:38;
if (length(varargin)>0) && ~isempty(varargin{1})
    band_inds = varargin{1};
end

%% Variable Input 2 - select blocks to load
load_blocks = 'grid'; % default set of 256 electrode grid 
relevant_blocks = 1:4; % default block names for 256 electrode grid
if (length(varargin) > 1) && ~isempty(varargin{2})
    load_blocks = varargin{2};
end
if isnumeric(load_blocks)
    relevant_blocks = load_blocks; % if blocks are a range of numbers load these
end
if strcmpi(load_blocks, 'nongrid') | strcmpi(load_blocks, 'all')
    % find how many blocks there are:
    dpath_dat_blk = [evnt(1).dpath filesep 'HilbAA_4to200_40band'];
    htk_list = dir([dpath_dat_blk filesep '*.htk']);
    max_blk = ceil(length(htk_list)/64); % magic constant of 64 chans to a block!
    if strcmpi(load_blocks, 'nongrid')
        if max_blk >= 5
            relevant_blocks = 5:max_blk; % load blocks beyond 256
        else
            relevant_blocks = [];
        end
    elseif strcmpi(load_blocks, 'all')
        relevant_blocks = 1:max_blk;
    end
end
    
%% Variable Inputs 3&5 badTimeSegments_filename and badChannels:
badTimeSegments_filename = 'badTimeSegments.mat';
if (length(varargin) > 2) && ~isempty(varargin{3})
    badTimeSegments_filename = varargin{3};
end
bad_channel_filename = 'badChannels.txt';
if (length(varargin) > 3) && ~isempty(varargin{4})
    bad_channel_filename = varargin{4};
end



%% Sort evnt such that the sequencing makes sense:
start_times = zeros(1,length(evnt));
for i = 1:length(evnt) 
   start_times(i) = evnt(i).StartTime;
end
[~,order] = sort(start_times);
evnt = evnt(order);

%% get list of tartget/prime names/starttimes
num_trials = length(evnt)/2;
target_names = cell(num_trials,1);
target_starttimes = zeros(num_trials, 1);
prime_names = cell(num_trials, 1);
data_block = cell(num_trials,1);
prime_starttimes = zeros(num_trials, 1);
target_duration = zeros(num_trials,1);
prime_duration = zeros(num_trials,1);


for i = 1:num_trials
    prime_ind = 2*i-1;
    target_ind = 2*i;
    
    prime_names{i} = evnt(prime_ind).name;
    prime_starttimes(i) = evnt(prime_ind).StartTime;
    prime_duration(i) = evnt(prime_ind).StopTime - evnt(prime_ind).StartTime;
    
    target_names{i} = evnt(target_ind).name;
    target_starttimes(i) = evnt(target_ind).StartTime;
    target_duration(i) = evnt(target_ind).StopTime - evnt(target_ind).StartTime;
end

%% find out the association between prime and target
% load list of words
% loads homophone_list_full
% col 1 - dominant sense, col 2 - subordinant sense, col 3 - homophone
dpath = strsplit(evnt(1).dpath, filesep);
base_dir = strjoin(dpath(1:(end-2)),filesep);
%load('/Users/changlab/Documents/changrepo/matlab/analysis/Homophones/Homophone_Prime_Exp_6/WordLists/homophone_list_full.mat')
load([base_dir filesep 'behavior' filesep 'homophone_list_full.mat']);



is_related_dominant = false(num_trials,1);
is_related_subordinant = false(num_trials, 1);
for i = 1:num_trials
    is_homo = strcmpi(homophone_list_full(:,1), target_names{i});
    is_p1 = strcmpi(homophone_list_full(:,2), prime_names{i});
    is_p2 = strcmpi(homophone_list_full(:,3), prime_names{i});

    is_related_dominant(i) = (sum(is_homo & is_p1) > 0);
    is_related_subordinant(i) = (sum(is_homo & is_p2) > 0); 
end

%% Generate ECoG ERPs
%subj_dir = '/Users/changlab/Documents/data/EC123/data';
tmp = strsplit(evnt(1).dpath, filesep);
subj_dir = strjoin(tmp(1:(end-1)), filesep);
%evnt = convert_dpaths_local(evnt)

time_win = [-1.5 3]; % set up time range for each erp
zscore_win = [-0.5 0]; % time range prior to prime stimulus onset for z-scoring
%fs = 400;
fs = 100;
time_dim = (time_win(2)-time_win(1))*fs;
ecog_primes = [];
ecog_targets = [];
is_good_trial = true(num_trials,1);

data_block{1} = evnt(1).block;
data_block_num = evnt(1).block;
data_subj = evnt(1).subject;
ecog_hg_dpath = [subj_dir filesep data_subj '_' data_block_num];

[badTimeSegments,bad_chans] = load_artifact_data(ecog_hg_dpath , relevant_blocks, badTimeSegments_filename, bad_channel_filename);

for i = 1:num_trials
    data_block{i} = evnt(i).block;
    data_block_num = evnt(i).block;
    data_subj = evnt(i).subject;
    ecog_hg_dpath = [subj_dir filesep data_subj '_' data_block_num];

    
    zscore_range = zscore_win + [prime_starttimes(i) prime_starttimes(i)];
    prime_range = time_win + [prime_starttimes(i) prime_starttimes(i)];
    target_range = time_win + [target_starttimes(i) target_starttimes(i)];
    
    %% load data:
    ecog_z = load_ecog_data_bands(ecog_hg_dpath, zscore_range, band_inds,relevant_blocks); % for z-scoring 256x51
    ecog_p = load_ecog_data_bands(ecog_hg_dpath, prime_range, band_inds,relevant_blocks); % for prime 256x601
    ecog_t = load_ecog_data_bands(ecog_hg_dpath, target_range, band_inds,relevant_blocks); % for target 256x601
    
    % zscore ecog to before trial interval
    ecog_p = gdivide(gsubtract(ecog_p, mean(ecog_z,2)), std(ecog_z,[],2));
    ecog_t = gdivide(gsubtract(ecog_t, mean(ecog_z,2)), std(ecog_z,[],2));
    
    %% Only include good times:
    z_range_bad = contains_badTimes(badTimeSegments, zscore_range); % employs helper function - contains_badTimes
    p_range_bad = contains_badTimes(badTimeSegments, prime_range);
    t_range_bad = contains_badTimes(badTimeSegments, target_range); 
    is_good_trial(i) = ~z_range_bad &  ~p_range_bad & ~t_range_bad;
    
    %% add ecog to main data:
    ecog_primes = cat(3, ecog_primes, ecog_p(:,1:time_dim));
    ecog_targets = cat(3, ecog_targets, ecog_t(:,1:time_dim));
end
time_axis = linspace(time_win(1), time_win(2), time_dim);

%% Clear extraneous data (since non-grid data can be bogus)
extraneous_chans = find(isnan(squeeze(ERPs_nongrid.ecog_targets(:,1,1)))); % There are non real channels included
ecog_primes(extraneous_chans,:,:) = [];
ecog_targets(extraneous_chans,:,:) = [];
bad_chans 

%% Assemble ERP structure:
ERPs.ecog_primes = ecog_primes;
ERPs.ecog_targets = ecog_targets;
ERPs.time_axis = time_axis;
ERPs.is_related_dominant = is_related_dominant;
ERPs.is_related_subordinant = is_related_subordinant;
ERPs.target_names = target_names;
ERPs.prime_names = prime_names;
ERPs.BadChans = bad_chans;
ERPs.badTimeSegments = badTimeSegments;
ERPs.is_good_trial = is_good_trial;
ERPs.prime_duration = prime_duration;
ERPs.target_duration = target_duration;
ERPs.prime_starttimes = prime_starttimes;
ERPs.target_starttimes = target_starttimes;
ERPs.data_block = data_block;


end


%% Helper Functions:

%%
function ecog = load_ecog_data_bands(dpath, time_range, band_inds, relevant_blocks)
%% helper function, creates a structured array of ecog data
% input data_path, timerange (in seconds), band_inds (out of 40 bands)
% relevant_blocks - lists the blocks of data to load
% filenames for badtrials and badchannels
%
% output - ecog, fields are:
%   data - 256 x timepts matrix
%   bad_channels - list of bad channels
%   bad_timepts - list of bad_time
band_dir = [dpath filesep 'HilbAA_4to200_40band'];

%% Load ecog data
ch_perblock = 64;
ecog = [];
for i = relevant_blocks
    for j = 1:ch_perblock
        [ecog_ch, fs] = readhtk([band_dir filesep 'Wav' num2str(i) num2str(j) '.htk'], 1000*time_range);
        % Take Mean of 8 bands if not already meaned.
        ecog_ch = mean(ecog_ch(band_inds,:),1); % take the average of the relevant bands
        if abs(fs - 400) > 10^-6
            warning('Raw Hilbert Sample Frequency not 400 Hz ?!')
        end
        ecog_ch = resample(ecog_ch,1,4);
        ecog = [ecog; ecog_ch];
    end
end

end

%% load artifacts
function [badTimeSegments,bad_chans] = load_artifact_data(dpath, relevant_blocks, badTimeSegments_filename, bad_channel_filename)
% Loads in artifact times
art_dir = [dpath filesep 'Artifacts'];
ch_perblock = 64;


if ~(exist([art_dir filesep badTimeSegments_filename], 'file') == 2)
    badTimeSegments_filename = 'badTimeSegments.mat';
    warning('BadTime Segments File not Found - trying basic format')
    if ~(exist([art_dir filesep badTimeSegments_filename], 'file') == 2)
        warning('BadTime Segments File not Found - error')
    end
end

if ~(exist([art_dir filesep bad_channel_filename], 'file') == 2)
    bad_channel_filename = 'badChannels.txt';
    warning('Bad Channel File not Found - trying basic format')
    if ~(exist([art_dir filesep bad_channel_filename], 'file') == 2)
        warning('Bad Channel File not Found - error')
    end
end


S = load([art_dir filesep badTimeSegments_filename]);
tmp = fieldnames(S); % KLUDGE - necessary in case of naming issues
badTimeSegments = getfield(S, tmp{1});

bad_chans = textread([art_dir filesep bad_channel_filename]);
% offset bad channel list to only apply to the ones that have been loaded:
bad_chan_offset = (min(relevant_blocks)-1)*ch_perblock; % offset of non grid
max_chan = max(relevant_blocks)*ch_perblock;
bad_chans = bad_chans - bad_chan_offset;
% remove bad channels beyond bounds of current data:
bad_chans((bad_chans < 1) | (bad_chans > max_chan)) = [];



end

%% 
function time_range_bad = contains_badTimes(bad_Segments, time_range); % employs helper function - contains_badTimes
%% Takes a nx2 matrix where each row is an interval of bad time, and 
% a 1x2 matrix demaracting a region of interest in returns true iff the ROI
% overlaps any of the 1x2 rois in the badTimeSegments matrix
time_range_bad = false;
for i = 1:size(bad_Segments,1)
    bad_segment = bad_Segments(i,:);  
% % %     w1 = abs(diff(bad_segment)); % span of the bad time segment
% % %     w2 = abs(diff(time_range)); % span of the roi
% % %     if (max(bad_segment(2),time_range(2)) - min(bad_segment(1),time_range(1))) < (w1+w2);
% % %         time_range_bad = true
% % %     end

    if min(bad_segment(2),time_range(2)) >= max(bad_segment(1), time_range(1))
        time_range_bad = true;
    end

end

end

 